#define _CRT_SECURE_NO_WARNINGS 1
#include<iostream>
using namespace std;

/*
	构造函数与析构函数
・1、构造函数：主要作用在于创建对象时为对象的成员属性赋值，编译器自动调用

    语法：类名( ){ }
	构造函数，没有返回值也不写void
	函数名称与类名相同
	构造函数可以有参数，因此可以发生重载
	程序在调用对象时候会自动调用构造，无需手动调用，且只会调用一次

・2、析构函数：主要作用在于对象销毁前系统的自动调用

	语法：~类名( ){ }
	析构函数，没有返回值也不写void
	函数名称与类名相同，在名称前加上符号~
	析构函数不可以有参数，因此不可以发生重载
	程序在调用对象时候会自动调用析构，无需手动调用，且只会调用一次
*/

//对象的初始化和清理（构造函数 + 析构函数）

class Person
{
public:
	//1、构造函数（对象调用时候必定执行）
	Person()
	{
		cout << "Person 构造函数的调用" << endl;
	}
	//2、析构函数（对象调用被释放后执行）
	~Person()
	{
		cout << "Person 的析构函数调用" << endl;
	}
};

void test01()
{
	Person P; //这里创建的是局部变量，在栈区，执行完毕后会释放该对象
			  //由于对象的调用且销毁释放，所以构造和析构都会执行
			  //栈区里面存放的是全局变量，局部变量
}

int main()
{
	//test01();
	Person P;		//若直接调用对象，析构函数还没有释放，就return 0
					//所以在main函数中创建对象不会执行析构函数
	system("pause");
	return 0;
}